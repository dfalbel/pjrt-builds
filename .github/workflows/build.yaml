on:
  workflow_dispatch:
    inputs:
      commit_hash:
        type: string
        description: 'Commit hash to build from (default: 6319f0d)'
        required: false
        default: 6319f0d

name: Build PJRT

permissions:
  contents: write

jobs:
  build:
    name: Build PJRT

    strategy:
      fail-fast: false
      matrix:
        
        config: 
          - {os: mac}
          - {os: linux}
          - {os: windows}

        include:
          - config: {os: mac}
            runner: macos-latest
            artifact_name: libpjrt_cpu.so
            shell: bash
            configure_args: --backend=cpu
            build_args: --config=clang_local
          - config: {os: linux}
            runner: ubuntu-latest
            artifact_name: libpjrt_cpu.dylib
            shell: bash
            configure_args: --backend=cpu
            build_args: --config=clang_local
          - config: {os: windows}
            runner: windows-latest
            shell: bash
            artifact_name: pjrt_cpu.dll
            setup: |
              choco install llvm -y
              # Remove MSVC from PATH to force clang usage
              echo "PATH=$(echo $PATH | tr ':' '\n' | grep -v 'Microsoft Visual Studio' | grep -v 'VC/Tools/MSVC' | tr '\n' ':')" >> $GITHUB_ENV
            configure_args: --backend=cpu --os=windows --host_compiler=clang --clang_path=C:/PROGRA~1/LLVM/bin/clang.exe
            build_args: | 
                --config=clang_local \
                --action_env=CC=C:/PROGRA~1/LLVM/bin/clang.exe \
                --action_env=CXX=C:/PROGRA~1/LLVM/bin/clang++.exe \
                --linkopt="--ld-path=C:/PROGRA~1/LLVM/bin/ld.lld.exe" \
                --repo_env=BAZEL_COMPILER=C:/PROGRA~1/LLVM/bin/clang.exe \
                --repo_env=USE_CLANG_CL=1 \
                --copt=-march=native \
                --define xnn_enable_arm_fp16_scalar=false \
                --define xnn_enable_arm_fp16_vector=false \
                --define xnn_enable_arm_bf16=false \
                --define xnn_enable_arm_dotprod=false \
                --define xnn_enable_arm_i8mm=false \
                --define xnn_enable_arm_sme=false \
                --define xnn_enable_arm_sme2=false \
                --define xnn_enable_riscv_vector=false \
                --define xnn_enable_riscv_fp16_vector=false \
                --define xnn_enable_avxvnni=false \
                --define xnn_enable_avxvnniint8=false \
                --define xnn_enable_avx256skx=false \
                --define xnn_enable_avx256vnni=false \
                --define xnn_enable_avx256vnnigfni=false \
                --define xnn_enable_avx512f=false \
                --define xnn_enable_avx512skx=false \
                --define xnn_enable_avx512vbmi=false \
                --define xnn_enable_avx512vnni=false \
                --define xnn_enable_avx512vnnigfni=false \
                --define xnn_enable_avx512amx=false \
                --define xnn_enable_avx512fp16=false \
                --define xnn_enable_avx512bf16=false \
                --define xnn_enable_hvx=false \
                --linkopt=/DEF:pjrt_cpu.def \
    
    runs-on: ${{ matrix.runner }}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      VERSION: ${{ github.event.inputs.commit_hash }}

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      - uses: actions/checkout@v4

      - run: ${{ matrix.setup }}

      - run: |
          git clone https://github.com/openxla/xla
          cd xla
          git checkout ${{ github.event.inputs.commit_hash }}

      - run: |
          cd xla
          python configure.py ${{ matrix.configure_args }}
          cat xla_configure.bazelrc
          
      - name: Fix Windows paths in bazelrc
        if: matrix.config.os == 'windows'
        shell: bash
        run: |
          cd xla
          # Fix Windows paths for Bazel compatibility
          # Replace "Program Files" with short name (handles both / and \ separators)
          sed -i 's|Program Files|PROGRA~1|g' xla_configure.bazelrc
          # Convert all backslashes to forward slashes
          sed -i 's|\\|/|g' xla_configure.bazelrc
          cat xla_configure.bazelrc
          
          # add a DEF file
          echo "LIBRARY pjrt_cpu" >> pjrt_cpu.def
          echo "EXPORTS" >> pjrt_cpu.def
          echo "   GetPjrtApi" >> pjrt_cpu.def

      - run: |
          cd xla
          bazel build ${{ matrix.build_args }} //xla/pjrt/c:pjrt_c_api_cpu_plugin.so

      - name: Rename binary with OS info
        shell: bash
        run: |
          OS=$(echo "${{ matrix.config.os }}" | cut -d'-' -f1)
          ARCH=$(uname -m)
          cp xla/bazel-bin/xla/pjrt/c/pjrt_c_api_cpu_plugin.so ${{ matrix.artifact_name }}
          if [[ "$OS" == "windows" ]]; then
            FILENAME="pjrt-${VERSION}-${OS}-${ARCH}.zip"
            7z a "$FILENAME" ${{ matrix.artifact_name }}
          else
            FILENAME="pjrt-${VERSION}-${OS}-${ARCH}.tar.gz"
            tar -czvf "$FILENAME" ${{ matrix.artifact_name }}
          fi
          echo "FILENAME=$FILENAME" >> $GITHUB_ENV

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.FILENAME }}
          name: PJRT
          tag_name: pjrt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
